#ifndef TOKENIZE_H
#define TOKENIZE_H

#include "list.h"
#include <stdbool.h>
#include <stdint.h>

typedef enum
{
	TOKEN_INVALID,
	TOKEN_INT,
	TOKEN_IDENTIFIER,
	TOKEN_TYPEDEF,
	TOKEN_FN,
	TOKEN_LET,
	TOKEN_PLUS,
	TOKEN_MINUS,
	TOKEN_STAR,
	TOKEN_OPEN_PAREN,
	TOKEN_CLOSE_PAREN,
	TOKEN_ARROW,
	TOKEN_I16,
	TOKEN_U16,
	TOKEN_I8,
	TOKEN_U8,
	TOKEN_VOID,
	TOKEN_BOOL,
	TOKEN_NULL,
	TOKEN_COLON,
	TOKEN_OPEN_BRACE,
	TOKEN_CLOSE_BRACE,
	TOKEN_SEMICOLON,
	TOKEN_EQUAL,
	TOKEN_CMP_LT,
	TOKEN_CMP_GT,
	TOKEN_CMP_LE,
	TOKEN_CMP_GE,
	TOKEN_CMP_EQ,
	TOKEN_CMP_NEQ,
	TOKEN_LOGIC_AND,
	TOKEN_LOGIC_OR,
	TOKEN_AMP,
	TOKEN_FOR,
	TOKEN_OPEN_BRACKET,
	TOKEN_CLOSE_BRACKET,
	TOKEN_STRUCT,
	TOKEN_STATIC,
	TOKEN_DOT,
	TOKEN_COMMA,
	TOKEN_ARRAY_DECL,
	TOKEN_RETURN,
	TOKEN_IF,
	TOKEN_ELSE,
	TOKEN_WHILE,
	TOKEN_BREAK,
	TOKEN_TRUE,
	TOKEN_FALSE,
	TOKEN_CONTINUE,
	TOKEN_STR_LITERAL
} TokenType;

typedef struct
{
	const char *name;
	uint64_t int_literal;
	TokenType type;
	int line;
	int column;
	bool is_negative;
} Token;

extern bool tokenize_file(const char *filepath, Vector *tokens);

#endif
